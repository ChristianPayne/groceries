import type { Location } from "history";
import type { AssetsManifest } from "./entry";
import type { ClientRoute } from "./routes";
import type { RouteMatch } from "./routeMatching";
import type { RouteModules, RouteModule } from "./routeModules";
declare type Primitive = null | undefined | string | number | boolean | symbol | bigint;
declare type LiteralUnion<LiteralType, BaseType extends Primitive> = LiteralType | (BaseType & Record<never, never>);
/**
 * Represents a `<link>` element.
 *
 * WHATWG Specification: https://html.spec.whatwg.org/multipage/semantics.html#the-link-element
 */
export interface HtmlLinkDescriptor {
    /**
     * Address of the hyperlink
     */
    href: string;
    /**
     * How the element handles crossorigin requests
     */
    crossOrigin?: "anonymous" | "use-credentials";
    /**
     * Relationship between the document containing the hyperlink and the destination resource
     */
    rel: LiteralUnion<"alternate" | "dns-prefetch" | "icon" | "manifest" | "modulepreload" | "next" | "pingback" | "preconnect" | "prefetch" | "preload" | "prerender" | "search" | "stylesheet", string>;
    /**
     * Applicable media: "screen", "print", "(max-width: 764px)"
     */
    media?: string;
    /**
     * Integrity metadata used in Subresource Integrity checks
     */
    integrity?: string;
    /**
     * Language of the linked resource
     */
    hrefLang?: string;
    /**
     * Hint for the type of the referenced resource
     */
    type?: string;
    /**
     * Referrer policy for fetches initiated by the element
     */
    referrerPolicy?: "" | "no-referrer" | "no-referrer-when-downgrade" | "same-origin" | "origin" | "strict-origin" | "origin-when-cross-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
    /**
     * Sizes of the icons (for rel="icon")
     */
    sizes?: string;
    /**
     * Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload")
     */
    imagesrcset?: string;
    /**
     * Image sizes for different page layouts (for rel="preload")
     */
    imagesizes?: string;
    /**
     * Potential destination for a preload request (for rel="preload" and rel="modulepreload")
     */
    as?: LiteralUnion<"audio" | "audioworklet" | "document" | "embed" | "fetch" | "font" | "frame" | "iframe" | "image" | "manifest" | "object" | "paintworklet" | "report" | "script" | "serviceworker" | "sharedworker" | "style" | "track" | "video" | "worker" | "xslt", string>;
    /**
     * Color to use when customizing a site's icon (for rel="mask-icon")
     */
    color?: string;
    /**
     * Whether the link is disabled
     */
    disabled?: boolean;
    /**
     * The title attribute has special semantics on this element: Title of the link; CSS style sheet set name.
     */
    title?: string;
}
export interface PrefetchPageDescriptor extends Omit<HtmlLinkDescriptor, "href" | "rel" | "type" | "sizes" | "imagesrcset" | "imagesizes" | "as" | "color" | "title"> {
    /**
     * The absolute path of the page to prefetch.
     */
    page: string;
}
export declare type LinkDescriptor = HtmlLinkDescriptor | PrefetchPageDescriptor;
/**
 * Gets all the links for a set of matches. The modules are assumed to have been
 * loaded already.
 */
export declare function getLinksForMatches(matches: RouteMatch<ClientRoute>[], routeModules: RouteModules, manifest: AssetsManifest): LinkDescriptor[];
export declare function prefetchStyleLinks(routeModule: RouteModule): Promise<void>;
export declare function isPageLinkDescriptor(object: any): object is PrefetchPageDescriptor;
export declare function isHtmlLinkDescriptor(object: any): object is HtmlLinkDescriptor;
export declare function getStylesheetPrefetchLinks(matches: RouteMatch<ClientRoute>[], routeModules: RouteModules): Promise<{
    /**
     * Address of the hyperlink
     */
    href: string;
    /**
     * How the element handles crossorigin requests
     */
    crossOrigin?: "anonymous" | "use-credentials" | undefined;
    /**
     * Applicable media: "screen", "print", "(max-width: 764px)"
     */
    media?: string | undefined;
    /**
     * Integrity metadata used in Subresource Integrity checks
     */
    integrity?: string | undefined;
    /**
     * Language of the linked resource
     */
    hrefLang?: string | undefined;
    /**
     * Hint for the type of the referenced resource
     */
    type?: string | undefined;
    /**
     * Referrer policy for fetches initiated by the element
     */
    referrerPolicy?: "" | "origin" | "no-referrer" | "no-referrer-when-downgrade" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url" | undefined;
    /**
     * Sizes of the icons (for rel="icon")
     */
    sizes?: string | undefined;
    /**
     * Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel="preload")
     */
    imagesrcset?: string | undefined;
    /**
     * Image sizes for different page layouts (for rel="preload")
     */
    imagesizes?: string | undefined;
    /**
     * Potential destination for a preload request (for rel="preload" and rel="modulepreload")
     */
    as?: LiteralUnion<"object" | "style" | "embed" | "font" | "audio" | "iframe" | "script" | "track" | "video" | "image" | "manifest" | "document" | "audioworklet" | "fetch" | "frame" | "paintworklet" | "report" | "serviceworker" | "sharedworker" | "worker" | "xslt", string> | undefined;
    /**
     * Color to use when customizing a site's icon (for rel="mask-icon")
     */
    color?: string | undefined;
    /**
     * Whether the link is disabled
     */
    disabled?: boolean | undefined;
    /**
     * The title attribute has special semantics on this element: Title of the link; CSS style sheet set name.
     */
    title?: string | undefined;
    rel: string;
}[]>;
export declare function getNewMatchesForLinks(page: string, nextMatches: RouteMatch<ClientRoute>[], currentMatches: RouteMatch<ClientRoute>[], location: Location, mode: "data" | "assets"): RouteMatch<ClientRoute>[];
export declare function getDataLinkHrefs(page: string, matches: RouteMatch<ClientRoute>[], manifest: AssetsManifest): string[];
export declare function getModuleLinkHrefs(matches: RouteMatch<ClientRoute>[], manifestPatch: AssetsManifest): string[];
export declare function dedupe(descriptors: LinkDescriptor[], preloads: string[]): LinkDescriptor[];
export {};
