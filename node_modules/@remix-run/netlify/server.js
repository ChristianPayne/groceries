/**
 * @remix-run/netlify v1.5.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var node = require('@remix-run/node');
var binaryTypes = require('./binaryTypes.js');

/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */

function createRequestHandler({
  build,
  getLoadContext,
  mode = process.env.NODE_ENV
}) {
  let handleRequest = node.createRequestHandler(build, mode);
  return async (event, context) => {
    let request = createRemixRequest(event);
    let loadContext = typeof getLoadContext === "function" ? getLoadContext(event, context) : undefined;
    let response = await handleRequest(request, loadContext);
    return sendRemixResponse(response);
  };
}
function createRemixRequest(event) {
  let url;

  if (process.env.NODE_ENV !== "development") {
    url = new URL(event.rawUrl);
  } else {
    let origin = event.headers.host;
    let rawPath = getRawPath(event);
    url = new URL(rawPath, `http://${origin}`);
  }

  let init = {
    method: event.httpMethod,
    headers: createRemixHeaders(event.multiValueHeaders)
  };

  if (event.httpMethod !== "GET" && event.httpMethod !== "HEAD" && event.body) {
    var _event$headers$conten;

    let isFormData = (_event$headers$conten = event.headers["content-type"]) === null || _event$headers$conten === void 0 ? void 0 : _event$headers$conten.includes("multipart/form-data");
    init.body = event.isBase64Encoded ? isFormData ? Buffer.from(event.body, "base64") : Buffer.from(event.body, "base64").toString() : event.body;
  }

  return new node.Request(url.href, init);
}
function createRemixHeaders(requestHeaders) {
  let headers = new node.Headers();

  for (let [key, values] of Object.entries(requestHeaders)) {
    if (values) {
      for (let value of values) {
        headers.append(key, value);
      }
    }
  }

  return headers;
} // `netlify dev` doesn't return the full url in the event.rawUrl, so we need to create it ourselves

function getRawPath(event) {
  let rawPath = event.path;
  let searchParams = new URLSearchParams();

  if (!event.multiValueQueryStringParameters) {
    return rawPath;
  }

  let paramKeys = Object.keys(event.multiValueQueryStringParameters);

  for (let key of paramKeys) {
    let values = event.multiValueQueryStringParameters[key];
    if (!values) continue;

    for (let val of values) {
      searchParams.append(key, val);
    }
  }

  let rawParams = searchParams.toString();
  if (rawParams) rawPath += `?${rawParams}`;
  return rawPath;
}

async function sendRemixResponse(nodeResponse) {
  let contentType = nodeResponse.headers.get("Content-Type");
  let body;
  let isBase64Encoded = binaryTypes.isBinaryType(contentType);

  if (nodeResponse.body) {
    if (isBase64Encoded) {
      body = await node.readableStreamToString(nodeResponse.body, "base64");
    } else {
      body = await nodeResponse.text();
    }
  }

  let multiValueHeaders = nodeResponse.headers.raw();
  return {
    statusCode: nodeResponse.status,
    multiValueHeaders,
    body,
    isBase64Encoded
  };
}

exports.createRemixHeaders = createRemixHeaders;
exports.createRemixRequest = createRemixRequest;
exports.createRequestHandler = createRequestHandler;
exports.sendRemixResponse = sendRemixResponse;
